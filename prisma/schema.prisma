// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// commented out sections are refactors based on DB migration + nextauth -> clerk refactor

// model Account {
//   // mongodb
//   // id                String  @id @default(auto()) @map("_id") @db.ObjectId
//   id                String  @id @default(uuid())
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String? // for OAuth
//   access_token      String? // for OAuth
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? // for OAuth
//   session_state     String?
//   user              User    @relation(fields: [userId], references: [id])

//   @@unique([provider, providerAccountId])
// }

// model Session {
//   // id           String   @id @default(auto()) @map("_id") @db.ObjectId
//   id                String  @id @default(uuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id])
// }

model User {
  // id            String    @id @default(auto()) @map("_id") @db.ObjectId 
  id                String  @id @default(uuid())
  userId            String  @unique
  name          String?
  // email         String?   @unique
  // emailVerified DateTime?
  // username String? @unique
  image         String?
  // accounts      Account[]
  // sessions      Session[]
  habits        Habit[]
  // linkedUserId    String?   @db.ObjectId
  isAccountLinked Boolean @default(false)
  linkedUserId    String? 
  linkingRequests LinkingRequest[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([linkedUserId], name: "linkedUserId_idx")
}

model LinkingRequest {
  // id               String   @id @default(auto()) @map("_id") @db.ObjectId  
  // requestorId      String   @map("requestor_id") @db.ObjectId
  // requestorUserId      String   @map("requestor_id")
  // responderUserId      String?
  // responderEmail   String?
  // secretQuestion   String
  // secretAnswerHash String
  // expiryDate       DateTime
  // linkType         String
  id              String @id @default(uuid())
  userId          String
  userEmail       String?
  partnerId       String?
  partnerEmail    String?
  passcode        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [userId]) 

  @@index([userId], name: "by_user")
  @@unique([userId, partnerEmail], name: "unique_user_partnerEmail")
}

model Habit {
  // id             String  @id @default(auto()) @map("_id") @db.ObjectId
  id                String  @id @default(uuid())
  habitName      String
  completions    HabitCompletion[]
  user           User  @relation(fields: [userId], references: [userId])
  userId         String
  color          String
  slug           String @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model HabitCompletion {
  // id             String   @id @default(auto()) @map("_id") @db.ObjectId
  id                String  @id @default(uuid())
  date           DateTime
  dayOfWeek      String
  isActive       Boolean
  isComplete     Boolean
  isIncluded     Boolean
  habit          Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
  habitId        String
}
